<?php

namespace App\Bot\Conversations;

use App\Models\TelegramContact;
use BotMan\BotMan\Messages\Conversations\Conversation;
use BotMan\Drivers\Telegram\Extensions\Keyboard;
use BotMan\Drivers\Telegram\Extensions\KeyboardButton;

/**
 * –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ Telegram-–±–æ—Ç–∞.
 *
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * –∏ –∑–∞–ø—É—Å–∫–∞ WebApp, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
class ApplicationConversation extends Conversation
{
    public const BUTTON_SHARE_PHONE = 'üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    public const BUTTON_SKIP_PHONE = 'üîì –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –Ω–æ–º–µ—Ä–∞';

    /**
     * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
     */
    public function run(): void
    {
        $this->showMainMenu();
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏.
     */
    public function showMainMenu(): void
    {
        $user = $this->bot->getUser();
        $message = $this->bot->getMessage();
        $chatId = $message->getRecipient() ?: $user->getId();

        $storedContact = TelegramContact::query()
            ->where('tg_user_id', $user->getId())
            ->first();

        if ($storedContact && (!$storedContact->tg_chat_id || (string) $storedContact->tg_chat_id !== (string) $chatId)) {
            $storedContact->tg_chat_id = $chatId;
            $storedContact->save();
        }

        $this->sendPhoneRequestKeyboard((bool) $storedContact);
        $this->sendWebAppButton($storedContact?->phone);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     */
    protected function sendPhoneRequestKeyboard(bool $hasStoredPhone): void
    {
        $keyboardPayload = Keyboard::create()
            ->type(Keyboard::TYPE_KEYBOARD)
            ->resizeKeyboard(true)
            ->oneTimeKeyboard(false)
            ->addRow(
                KeyboardButton::create(self::BUTTON_SHARE_PHONE)->requestContact()
            )
            ->addRow(
                KeyboardButton::create(self::BUTTON_SKIP_PHONE)
            )
            ->toArray();

        $text = $hasStoredPhone
            ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É.'
            : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ –ß—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –∑–∞—è–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.';

        $this->bot->reply($text, $keyboardPayload);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç inline-–∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ WebApp.
     */
    protected function sendWebAppButton(?string $phone = null): void
    {
        $url = $this->buildWebAppUrl($phone);

        $keyboard = [
            'inline_keyboard' => [[
                [
                    'text' => '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    'web_app' => ['url' => $url],
                ],
            ]],
        ];

        $this->bot->reply('–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ üëá', [
            'reply_markup' => json_encode($keyboard, JSON_UNESCAPED_UNICODE),
        ]);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç URL WebApp —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞.
     */
    protected function buildWebAppUrl(?string $phone = null): string
    {
        $user = $this->bot->getUser();
        $message = $this->bot->getMessage();

        $baseUrl = rtrim((string) config('services.telegram.web_app_url', 'https://app.fondzrenie.ru'), '/');

        $query = [
            'tg_user_id' => $user->getId(),
            'tg_chat_id' => $message->getRecipient() ?: $user->getId(),
        ];

        $sanitizedPhone = $this->sanitizePhoneForQuery($phone);
        if ($sanitizedPhone) {
            $query['phone'] = $sanitizedPhone;
        }

        return $baseUrl . '?' . http_build_query($query);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ WebApp.
     */
    protected function sanitizePhoneForQuery(?string $phone): ?string
    {
        if (!$phone) {
            return null;
        }

        $digits = preg_replace('/\D+/', '', $phone);

        return $digits ?: null;
    }
}
