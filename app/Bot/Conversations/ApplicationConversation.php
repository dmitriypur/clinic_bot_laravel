<?php

namespace App\Bot\Conversations;

use App\Bot\Traits\HandlesDeepLinks;
use App\Models\Application;
use App\Models\City;
use App\Models\Clinic;
use App\Models\Doctor;
use BotMan\BotMan\Messages\Conversations\Conversation;
use BotMan\BotMan\Messages\Incoming\Answer;
use BotMan\BotMan\Messages\Outgoing\Actions\Button;
use BotMan\BotMan\Messages\Outgoing\Question;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É
 * 
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∫ –≤—Ä–∞—á—É:
 * - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏
 * - –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ
 * - –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥, –∫–ª–∏–Ω–∏–∫—É, –≤—Ä–∞—á–∞
 * - –°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:
 * - –û–±—ã—á–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
 * - –ó–∞–ø–∏—Å—å —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º 
 * - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–∞—á–µ–π –±–µ–∑ –∑–∞–ø–∏—Å–∏
 */
class ApplicationConversation extends Conversation
{
    use HandlesDeepLinks;
    /**
     * –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞
     * 
     * –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è:
     * - scenario: —Ç–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è (appointment, appointment_promo, view_doctors)
     * - city_id, city_name: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
     * - clinic_id, clinic_name: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * - doctor_id: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–∞—á
     * - full_name: –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞
     * - phone: —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏
     * - birth_date: –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * - promo_code: –ø—Ä–æ–º–æ–∫–æ–¥ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
     * - full_name_parent: –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è (–¥–ª—è –¥–µ—Ç–µ–π)
     */
    protected $applicationData = [];

    /**
     * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
     */
    public function run()
    {
        $this->showMainMenu();
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
     * 
     * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:
     * - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º (–æ–±—ã—á–Ω–∞—è –∑–∞–ø–∏—Å—å)
     * - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–∞—á–µ–π (–±–µ–∑ –∑–∞–ø–∏—Å–∏)
     * - –ó–∞–ø–∏—Å—å —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º (—Å–æ —Å–∫–∏–¥–∫–æ–π)
     * - –ü–µ—Ä–µ—Ö–æ–¥ –≤ Telegram –∫–∞–Ω–∞–ª
     */
    public function showMainMenu()
    {
        $question = Question::create('üè• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
            ->addButtons([
                Button::create('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º')->value('make_appointment'),
                Button::create('üë©üèª‚Äç‚öïÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–∞—á–µ–π')->value('view_doctors'),
                Button::create('üéÅ –ó–∞–ø–∏—Å—å —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º')->value('appointment_promo'),
                Button::create('üëâ –¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª')->url('https://t.me/kidsvision1'),
            ]);

        $this->ask($question, function (Answer $answer) {
            // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º deep links –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
            if ($this->handleDeepLinks($answer)) {
                return; // Deep link –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            }
            
            $value = $answer->getValue();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            switch ($value) {
                case 'make_appointment':
                    // –û–±—ã—á–Ω–∞—è –∑–∞–ø–∏—Å—å - —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
                    $this->applicationData['scenario'] = 'appointment';
                    $this->askBirthDate();
                    break;
                case 'view_doctors':
                    // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–∞—á–µ–π - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
                    $this->applicationData['scenario'] = 'view_doctors';
                    $this->askCity();
                    break;
                case 'appointment_promo':
                    // –ó–∞–ø–∏—Å—å —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º - —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
                    $this->applicationData['scenario'] = 'appointment_promo';
                    $this->askPromoCode();
                    break;
                default:
                    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
                    $this->showMainMenu();
            }
        });
    }

    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ)
     * 
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ dd.mm.yyyy
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥
     */
    public function askBirthDate()
    {
        $question = Question::create('üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.10.2000)')
            ->addButtons([
                Button::create('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')->value('skip'),
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) {
            $text = $answer->getText();
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
            if ($answer->getValue() === 'skip') {
                $this->askCity();
                return;
            }
            
            // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
            // –§–æ—Ä–º–∞—Ç: 2 —Ü–∏—Ñ—Ä—ã.2 —Ü–∏—Ñ—Ä—ã.4 —Ü–∏—Ñ—Ä—ã (dd.mm.yyyy)
            if (preg_match('/^\d{2}\.\d{2}\.\d{4}$/', $text)) {
                $this->applicationData['birth_date'] = $text;
                $this->askCity();
            } else {
                // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π - –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
                $this->say('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy');
                $this->askBirthDate();
            }
        });
    }

    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π
     * 
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –±–æ—Ç–µ,
     * –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –≤ 1C
     */
    public function askPromoCode()
    {
        $question = Question::create('üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')
            ->addButtons([
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            $promoCode = $answer->getText();
            $this->applicationData['promo_code'] = $promoCode;
            $this->askCity();
        });
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
     * 
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (status = 1)
     * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è 10 –≥–æ—Ä–æ–¥–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
     */
    public function askCity()
    {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        $cities = City::where('status', 1)->orderBy('name')->get();
        
        if ($cities->isEmpty()) {
            $this->say('‚ùå –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        $question = Question::create('üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 10 –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram API)
        foreach ($cities->take(10) as $city) {
            $question->addButton(Button::create($city->name)->value('city_' . $city->id));
        }
        
        $question->addButton(Button::create('–í –º–µ–Ω—é')->value('menu'));

        $this->ask($question, function (Answer $answer) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ (–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'city_')
            if (str_starts_with($answer->getValue(), 'city_')) {
                $cityId = str_replace('city_', '', $answer->getValue());
                $city = City::find($cityId);
                
                if ($city) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
                    $this->applicationData['city_id'] = $cityId;
                    $this->applicationData['city_name'] = $city->name;
                    
                    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
                    if ($this->applicationData['scenario'] === 'view_doctors') {
                        // –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–∞—á–µ–π - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                        $this->showDoctors();
                    } else {
                        // –î–ª—è –∑–∞–ø–∏—Å–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–ª–∏–Ω–∏–∫—É –∏–ª–∏ –≤—Ä–∞—á–∞
                        $this->askClinicOrDoctor();
                    }
                } else {
                    $this->say('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    $this->askCity();
                }
            } else {
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å
                $this->askCity();
            }
        });
    }

    public function askClinicOrDoctor()
    {
        $question = Question::create('üëÄ –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç—è–º –∑—Ä–µ–Ω–∏–µ.
üíØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–µ–¥—É—â–∏—Ö –¥–µ—Ç—Å–∫–∏—Ö –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥–æ–≤ –†–æ—Å—Å–∏–∏ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ 
"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –§–æ–Ω–¥–∞ –∑–∞—â–∏—Ç—ã –¥–µ—Ç—Å–∫–æ–≥–æ –∑—Ä–µ–Ω–∏—è"')
            ->addButtons([
                Button::create('üë©üèª‚Äç‚öïÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–∞—á–µ–π')->value('doctors'),
                Button::create('üè• –°–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∏–Ω–∏–∫–∏')->value('clinics'),
                Button::create('–ù–∞–∑–∞–¥')->value('back'),
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) {
            switch ($answer->getValue()) {
                case 'doctors':
                    $this->showDoctors();
                    break;
                case 'clinics':
                    $this->showClinics();
                    break;
                case 'back':
                    $this->askCity();
                    break;
                case 'menu':
                    $this->showMainMenu();
                    break;
                default:
                    $this->askClinicOrDoctor();
            }
        });
    }

    public function showClinics()
    {
        $cityId = $this->applicationData['city_id'];
        $clinics = Clinic::whereHas('cities', function ($query) use ($cityId) {
            $query->where('city_id', $cityId);
        })->where('status', 1)->get();

        if ($clinics->isEmpty()) {
            $this->say('‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫');
            $this->askCity();
            return;
        }

        $question = Question::create('üè• –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É:');
        
        foreach ($clinics->take(10) as $clinic) {
            $question->addButton(Button::create($clinic->name)->value('clinic_' . $clinic->id));
        }
        
        $question->addButton(Button::create('–ù–∞–∑–∞–¥')->value('back'));
        $question->addButton(Button::create('–í –º–µ–Ω—é')->value('menu'));

        $this->ask($question, function (Answer $answer) use ($clinics) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }
            
            if ($answer->getValue() === 'back') {
                $this->askClinicOrDoctor();
                return;
            }

            if (str_starts_with($answer->getValue(), 'clinic_')) {
                $clinicId = str_replace('clinic_', '', $answer->getValue());
                $clinic = $clinics->find($clinicId);
                
                if ($clinic) {
                    $this->applicationData['clinic_id'] = $clinicId;
                    $this->applicationData['clinic_name'] = $clinic->name;
                    $this->showDoctorsInClinic($clinicId);
                } else {
                    $this->say('‚ùå –ö–ª–∏–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    $this->showClinics();
                }
            } else {
                $this->showClinics();
            }
        });
    }

    public function showDoctors($clinicId = null)
    {
        $cityId = $this->applicationData['city_id'];
        
        $query = Doctor::whereHas('clinics.cities', function ($q) use ($cityId) {
            $q->where('city_id', $cityId);
        })->where('status', 1);
        
        if ($clinicId) {
            $query->whereHas('clinics', function ($q) use ($clinicId) {
                $q->where('clinic_id', $clinicId);
            });
        }
        
        $doctors = $query->get();

        if ($doctors->isEmpty()) {
            $this->say('‚ùå –í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }

        $question = Question::create('üë©üèª‚Äç‚öïÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:');
        
        foreach ($doctors->take(10) as $doctor) {
            $name = $doctor->full_name;
            $question->addButton(Button::create($name)->value('doctor_' . $doctor->id));
        }
        
        $question->addButton(Button::create('–ù–∞–∑–∞–¥')->value('back'));
        $question->addButton(Button::create('–í –º–µ–Ω—é')->value('menu'));

        $this->ask($question, function (Answer $answer) use ($doctors) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }
            
            if ($answer->getValue() === 'back') {
                $this->askClinicOrDoctor();
                return;
            }

            if (str_starts_with($answer->getValue(), 'doctor_')) {
                $doctorId = str_replace('doctor_', '', $answer->getValue());
                $doctor = $doctors->find($doctorId);
                
                if ($doctor) {
                    $this->applicationData['doctor_id'] = $doctorId;
                    $this->showDoctorInfo($doctor);
                } else {
                    $this->say('‚ùå –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    $this->showDoctors();
                }
            } else {
                $this->showDoctors();
            }
        });
    }

    public function showDoctorsInClinic($clinicId)
    {
        $this->showDoctors($clinicId);
    }

    public function showDoctorInfo(Doctor $doctor)
    {
        $info = "üë©üèª‚Äç‚öïÔ∏è *–í—Ä–∞—á*: {$doctor->full_name}\n";
        $info .= "üìÜ *–í–æ–∑—Ä–∞—Å—Ç*: {$doctor->age}\n";
        $info .= "üéì *–°—Ç–∞–∂ (–ª–µ—Ç)*: {$doctor->experience}\n";
        $info .= "‚≠ê *–†–µ–π—Ç–∏–Ω–≥*: {$doctor->rating}\n";
        $info .= "üìÖ *–í–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–µ–º–∞*: —Å {$doctor->age_admission_from} –¥–æ {$doctor->age_admission_to} –ª–µ—Ç\n\n";
        
        $clinics = $doctor->clinics;
        if ($clinics->isNotEmpty()) {
            $info .= "üè• *–ö–ª–∏–Ω–∏–∫–∏ –ø—Ä–∏–µ–º–∞*:\n";
            foreach ($clinics as $clinic) {
                $info .= "‚Ä¢ {$clinic->name}\n";
            }
        }

        $question = Question::create($info)
            ->addButtons([
                Button::create('üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è')->value('make_appointment'),
                Button::create('‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')->value('leave_review'),
                Button::create('‚≠ê –û—Ç–∑—ã–≤—ã')->value('view_reviews'),
                Button::create('–ù–∞–∑–∞–¥')->value('back'),
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) use ($doctor) {
            // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º deep links –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
            if ($this->handleDeepLinks($answer)) {
                return; // Deep link –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            }
            
            switch ($answer->getValue()) {
                case 'make_appointment':
                    $this->askPhone();
                    break;
                case 'leave_review':
                    $reviewUrl = "https://t.me/" . config('botman.drivers.telegram.username') . "?start=review_{$doctor->uuid}";
                    $this->say("‚úçÔ∏è *–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≤—Ä–∞—á–µ*\n\n–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{$reviewUrl}\n\n–ò–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å —Ç–µ–º–∏, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≤—Ä–∞—á–µ {$doctor->full_name}");
                    $this->showDoctorInfo($doctor);
                    break;
                case 'view_reviews':
                    $this->showReviews($doctor);
                    break;
                case 'back':
                    $this->showDoctors();
                    break;
                case 'menu':
                    $this->showMainMenu();
                    break;
                default:
                    $this->showDoctorInfo($doctor);
            }
        });
    }

    public function askPhone()
    {
        $question = Question::create('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
            ->addButtons([
                Button::create('–ù–∞–∑–∞–¥')->value('back'),
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }
            
            if ($answer->getValue() === 'back') {
                $doctor = Doctor::find($this->applicationData['doctor_id']);
                $this->showDoctorInfo($doctor);
                return;
            }

            $phone = $answer->getText();
            
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (preg_match('/^\+?[0-9]{10,15}$/', str_replace([' ', '-', '(', ')'], '', $phone))) {
                $this->applicationData['phone'] = $phone;
                $this->askFullName();
            } else {
                $this->say('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
                $this->askPhone();
            }
        });
    }

    public function askFullName()
    {
        $question = Question::create('ü™™ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:')
            ->addButtons([
                Button::create('–ù–∞–∑–∞–¥')->value('back'),
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }
            
            if ($answer->getValue() === 'back') {
                $this->askPhone();
                return;
            }

            $fullName = trim($answer->getText());
            
            if (strlen($fullName) >= 3) {
                $this->applicationData['full_name'] = $fullName;
                $this->askParentName();
            } else {
                $this->say('‚ùå –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
                $this->askFullName();
            }
        });
    }

    public function askParentName()
    {
        $question = Question::create('üë® –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ —Ä–µ–±–µ–Ω–∫–∞):')
            ->addButtons([
                Button::create('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')->value('skip'),
                Button::create('–ù–∞–∑–∞–¥')->value('back'),
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }
            
            if ($answer->getValue() === 'back') {
                $this->askFullName();
                return;
            }
            
            if ($answer->getValue() === 'skip') {
                $this->askConsent();
                return;
            }

            $parentName = trim($answer->getText());
            $this->applicationData['full_name_parent'] = $parentName;
            $this->askConsent();
        });
    }

    public function askConsent()
    {
        $question = Question::create('‚úçÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
            ->addButtons([
                Button::create('‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ')->value('consent'),
                Button::create('–ù–∞–∑–∞–¥')->value('back'),
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }
            
            if ($answer->getValue() === 'back') {
                $this->askParentName();
                return;
            }
            
            if ($answer->getValue() === 'consent') {
                $this->createApplication();
            } else {
                $this->askConsent();
            }
        });
    }

    public function createApplication()
    {
        try {
            $user = $this->getBot()->getUser();
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            $applicationId = now()->format('YmdHis') . rand(1000, 9999);
            
            $applicationData = [
                'id' => $applicationId,
                'city_id' => $this->applicationData['city_id'],
                'clinic_id' => $this->applicationData['clinic_id'] ?? null,
                'doctor_id' => $this->applicationData['doctor_id'] ?? null,
                'full_name' => $this->applicationData['full_name'],
                'full_name_parent' => $this->applicationData['full_name_parent'] ?? null,
                'birth_date' => $this->applicationData['birth_date'] ?? null,
                'phone' => $this->applicationData['phone'],
                'promo_code' => $this->applicationData['promo_code'] ?? null,
                'tg_user_id' => $user->getId(),
                'tg_chat_id' => $this->getBot()->getMessage()->getRecipient(),
                'send_to_1c' => false,
            ];

            $application = Application::create($applicationData);

            $this->say("‚úÖ *–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\nüìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{$application->id}`\n\nüè• –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.");
            
            // TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 1C —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
            // TODO: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook
            
        } catch (\Exception $e) {
            $this->say('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            \Log::error('Bot application creation error: ' . $e->getMessage());
        }
    }

    public function showReviews(Doctor $doctor)
    {
        $reviews = $doctor->reviews()->where('status', 1)->latest()->take(5)->get();
        
        if ($reviews->isEmpty()) {
            $this->say('üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
            $this->showDoctorInfo($doctor);
            return;
        }

        $message = "‚≠ê *–û—Ç–∑—ã–≤—ã –æ –≤—Ä–∞—á–µ {$doctor->full_name}*:\n\n";
        
        foreach ($reviews as $review) {
            $stars = str_repeat('‚≠ê', $review->rating);
            $message .= "{$stars} ({$review->rating}/5)\n";
            if ($review->text) {
                $message .= "üìù {$review->text}\n";
            }
            $message .= "üìÖ {$review->created_at->format('d.m.Y')}\n\n";
        }

        $question = Question::create($message)
            ->addButtons([
                Button::create('–ù–∞–∑–∞–¥ –∫ –≤—Ä–∞—á—É')->value('back'),
                Button::create('–í –º–µ–Ω—é')->value('menu'),
            ]);

        $this->ask($question, function (Answer $answer) use ($doctor) {
            if ($answer->getValue() === 'menu') {
                $this->showMainMenu();
                return;
            }
            
            $this->showDoctorInfo($doctor);
        });
    }
}
