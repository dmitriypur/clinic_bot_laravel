<?php

namespace App\Bot\Conversations;

use App\Models\Doctor;
use App\Models\Review;
use BotMan\BotMan\Messages\Conversations\Conversation;
use BotMan\BotMan\Messages\Incoming\Answer;
use BotMan\BotMan\Messages\Outgoing\Actions\Button;
use BotMan\BotMan\Messages\Outgoing\Question;

class ReviewConversation extends Conversation
{
    protected $doctorUuid;
    protected $reviewData = [];

    public function __construct($doctorUuid)
    {
        $this->doctorUuid = $doctorUuid;
    }

    public function run()
    {
        $doctor = Doctor::where('uuid', $this->doctorUuid)->first();
        
        if (!$doctor) {
            $this->say('‚ùå –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        $this->reviewData['doctor_id'] = $doctor->id;
        $this->showDoctorAndAskRating($doctor);
    }

    public function showDoctorAndAskRating(Doctor $doctor)
    {
        $message = "‚≠ê –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –≤—Ä–∞—á–µ:\n\n";
        $message .= "üë©üèª‚Äç‚öïÔ∏è *{$doctor->full_name}*\n";
        $message .= "üéì –°—Ç–∞–∂: {$doctor->experience} –ª–µ—Ç\n";
        $message .= "üìÖ –í–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–µ–º–∞: —Å {$doctor->age_admission_from} –¥–æ {$doctor->age_admission_to} –ª–µ—Ç\n\n";
        $message .= "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:";

        $question = Question::create($message);
        
        for ($i = 1; $i <= 5; $i++) {
            $stars = str_repeat('‚≠ê', $i);
            $question->addButton(Button::create("{$stars} {$i}")->value($i));
        }
        
        $question->addButton(Button::create('‚ùå –û—Ç–º–µ–Ω–∞')->value('cancel'));

        $this->ask($question, function (Answer $answer) use ($doctor) {
            $rating = $answer->getValue();
            
            if ($rating === 'cancel') {
                $this->say('‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω');
                return;
            }
            
            if (in_array($rating, [1, 2, 3, 4, 5])) {
                $this->reviewData['rating'] = (int)$rating;
                $this->askReviewText($doctor);
            } else {
                $this->say('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5');
                $this->showDoctorAndAskRating($doctor);
            }
        });
    }

    public function askReviewText(Doctor $doctor)
    {
        $stars = str_repeat('‚≠ê', $this->reviewData['rating']);
        
        $question = Question::create("–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {$stars} ({$this->reviewData['rating']}/5)\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
            ->addButtons([
                Button::create('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')->value('skip'),
                Button::create('‚ùå –û—Ç–º–µ–Ω–∞')->value('cancel'),
            ]);

        $this->ask($question, function (Answer $answer) use ($doctor) {
            if ($answer->getValue() === 'cancel') {
                $this->say('‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω');
                return;
            }
            
            if ($answer->getValue() === 'skip') {
                $this->reviewData['text'] = null;
            } else {
                $text = trim($answer->getText());
                if (strlen($text) > 4000) {
                    $this->say('‚ùå –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)');
                    $this->askReviewText($doctor);
                    return;
                }
                $this->reviewData['text'] = $text ?: null;
            }
            
            $this->confirmReview($doctor);
        });
    }

    public function confirmReview(Doctor $doctor)
    {
        $stars = str_repeat('‚≠ê', $this->reviewData['rating']);
        
        $message = "üìù *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–∑—ã–≤:*\n\n";
        $message .= "üë©üèª‚Äç‚öïÔ∏è –í—Ä–∞—á: {$doctor->full_name}\n";
        $message .= "‚≠ê –û—Ü–µ–Ω–∫–∞: {$stars} ({$this->reviewData['rating']}/5)\n";
        
        if ($this->reviewData['text']) {
            $message .= "üí¨ –û—Ç–∑—ã–≤: {$this->reviewData['text']}\n";
        }

        $question = Question::create($message)
            ->addButtons([
                Button::create('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')->value('confirm'),
                Button::create('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç')->value('edit_text'),
                Button::create('‚≠ê –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É')->value('edit_rating'),
                Button::create('‚ùå –û—Ç–º–µ–Ω–∞')->value('cancel'),
            ]);

        $this->ask($question, function (Answer $answer) use ($doctor) {
            switch ($answer->getValue()) {
                case 'confirm':
                    $this->saveReview($doctor);
                    break;
                case 'edit_text':
                    $this->askReviewText($doctor);
                    break;
                case 'edit_rating':
                    $this->showDoctorAndAskRating($doctor);
                    break;
                case 'cancel':
                    $this->say('‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω');
                    break;
                default:
                    $this->confirmReview($doctor);
            }
        });
    }

    public function saveReview(Doctor $doctor)
    {
        try {
            $user = $this->getBot()->getUser();
            
            $review = Review::create([
                'text' => $this->reviewData['text'],
                'rating' => $this->reviewData['rating'],
                'user_id' => $user->getId(),
                'doctor_id' => $this->reviewData['doctor_id'],
                'status' => 1, // –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
            ]);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤—Ä–∞—á–∞
            $doctor->sum_ratings += $this->reviewData['rating'];
            $doctor->count_ratings += 1;
            $doctor->save();

            $stars = str_repeat('‚≠ê', $this->reviewData['rating']);
            $this->say("‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!*\n\n{$stars} –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {$this->reviewData['rating']}/5\n\nü©∫ –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–∞—Ü–∏–µ–Ω—Ç–∞–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.");
            
        } catch (\Exception $e) {
            $this->say('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            \Log::error('Bot review creation error: ' . $e->getMessage());
        }
    }
}
